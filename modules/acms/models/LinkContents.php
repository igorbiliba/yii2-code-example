<?php
namespace app\modules\acms\models;

use yii\helpers\ArrayHelper;
use yii\helpers\Html;

class LinkContents extends \app\models\LinkContents
{
    /**
     * @var UploadedFile
     */
    public $imageFile;

    /**
     * загружаем изображение
     *
     * @return bool
     */
    public function upload()
    {
        if ($this->validate()) {
            $imgPath = $this->getInternalImgPath();
            $this->imageFile->saveAs($imgPath);
            return true;
        } else {
            return false;
        }
    }

    /**
     * права редактирования по сценарию
     *
     * @return array
     */
    public function rules()
    {
        return ArrayHelper::merge(
            parent::rules(),
            [
                //[['content'], 'filter', 'filter' => '\yii\helpers\HtmlPurifier::process', 'on' => self::CONTENT_TYPE_TEXT],
                /*[['widget_id'], 'required', 'on' => self::CONTENT_TYPE_WIDGET],
                [['content'],   'required', 'on' => self::CONTENT_TYPE_HTML],
                [['content'],   'required', 'on' => self::CONTENT_TYPE_TEXT],
                [['content'],   'required', 'on' => self::CONTENT_TYPE_OTHER],*/
                [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, jpeg, bmp, gif', 'on' => self::CONTENT_TYPE_IMAGE],
            ]
        );
    }

    public function beforeValidate()
    {
        if(parent::beforeValidate()) {
            /**
             * сценарий модели зависит от типа контентного блока
             */
            if (!empty($this->content_type)) {
                $this->scenario = $this->content_type;
            }

            return true;
        }

        return false;
    }

    /**
     * типы контентных блоков для выпадашки
     *
     * @var array|string
     */
    public static function getTypeBlockList($key = null) {
        $list = [    
            self::CONTENT_TYPE_WIDGET => \Yii::$app->translate->get('acms_widget'),
            self::CONTENT_TYPE_HTML   => \Yii::$app->translate->get('acms_html'),
            self::CONTENT_TYPE_TEXT   => \Yii::$app->translate->get('acms_text'),
            self::CONTENT_TYPE_IMAGE  => \Yii::$app->translate->get('acms_image'),
            self::CONTENT_TYPE_OTHER  => \Yii::$app->translate->get('acms_other'),
        ];
        
        if(!empty($key)) {
            if(is_array($key)) {
                $key = end($key);
            }
            if(isset($list[$key])) {
                return $list[$key];
            }
            else {
                return null;
            }
        }
        
        return $list;
    }

    /**
     * если пришел новый тип и он отличается от придыдущего,
     * чистим данные
     *
     * @param $type
     */
    public function updateType($type) {
        if(!empty($type)) {
            if($this->content_type != $type) {
                $this->content_type = $type;
                $this->widget_id = null;
                $this->content = null;
            }
        }
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->initContentForImg();
    }

    /**
     * генерируем html для картинки
     */
    public function initContentForImg()
    {
        if ($this->content_type == self::CONTENT_TYPE_IMAGE && empty($this->content)) {
            $this->content = Html::img($this->getImgSrc());
        }
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        if(parent::save($runValidation, $attributeNames)) {
            //если изображение
            if($this->content_type == LinkContents::CONTENT_TYPE_IMAGE) {
                $this->upload();
            }

            return true;
        }

        return false;
    }
    
    /**
     * найдет переменную в шаблоне, или элемент массива
     * 
     * @param type $variable
     * @param type $link_id
     * @param type $is_array
     * @param type $sort
     */
    public static function findVariale($variable, $link_id, $is_array, $sort) {
        $query = self::find()
                ->where([
                    'link_id' => $link_id,
                    'key' => $variable,
                ]);
        
        if($is_array) {
            return $query->andWhere([
                'sort' => $sort,
            ])->one();
        }
        
        return $query->one();
    }
}