<?php

namespace app\modules\acms\controllers;

use app\models\LinkLanguages;
use app\modules\acms\models\form\LinkCredentialsForm;
use app\modules\acms\models\LinkContents;
use app\modules\acms\models\LinkSettings;
use Yii;
use app\models\Links;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\HttpException;
use yii\web\NotFoundHttpException;
use app\modules\acms\models\Tree;
use yii\web\UploadedFile;
use app\modules\acms\components\virtualTemplate\VirtualTemplate;

/**
 * StructureController implements the CRUD actions for Links model.
 */
class StructureController extends Controller
{
    public function behaviors()
    {
        return [
            /*'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],*/
        ];
    }

    public function actions() {
        return [
            'nodeChildren' => [
                'class' => 'gilek\gtreetable\actions\NodeChildrenAction',
                'treeModelName' => Tree::className()
            ],
            'nodeCreate' => [
                'class' => 'gilek\gtreetable\actions\NodeCreateAction',
                'treeModelName' => Tree::className()
            ],
            'nodeUpdate' => [
                'class' => 'gilek\gtreetable\actions\NodeUpdateAction',
                'treeModelName' => Tree::className()
            ],
            'nodeDelete' => [
                'class' => 'gilek\gtreetable\actions\NodeDeleteAction',
                'treeModelName' => Tree::className()
            ],
            'nodeMove' => [
                'class' => 'gilek\gtreetable\actions\NodeMoveAction',
                'treeModelName' => Tree::className()
            ],
        ];
    }

    /**
     * после манипуляций с деревом, перепишем урлы
     *
     * @param \yii\base\Action $action
     * @param mixed $result
     * @return mixed
     */
    public function afterAction($action, $result)
    {
        $ret = parent::afterAction($action, $result); // TODO: Change the autogenerated stub
        Tree::rewriteAllUrlsByNewPath();
        return $ret;
    }

    /**
     * Lists all Links models.
     * @return mixed
     */
    public function actionIndex()
    {
        $dataProvider = new ActiveDataProvider([
            'query' => Links::find(),
        ]);

        $mainPage = Tree::find()
            ->where(['level' => 0])
            ->orderBy('id ASC')
            ->one();

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'tree' => $this->renderPartial('@gilek/gtreetable/views/widget', ['options'=>[
                // 'manyroots' => true
                'draggable' => true
            ]]),
            'mainPage' => $mainPage ? $this->actionStuctpage($mainPage->id) : '',
            'id' => $mainPage->id,
            //'template' => $this->actionTemplate($mainPage->id),
        ]);
    }

    /**
     * ajax рендер шаблона
     *
     * @param $id
     * @return string
     */
    public function actionTemplate($id) {
        $model = $this->findModel($id);
        
        //отрендерим без макета.
        //$layout = $model->layout;
        $layout = null;
        
        //заносим путь к layout
        $render = new VirtualTemplate(
            $layout, true
        );
        //путь к шаблону
        $render->template = $model->template;
        
        //заносим зависимость линк
        $render->setLink($model);
        
        //вернуть html
        return $render->render();
    }
    
    /**
     * ajax контроллер, который возвращает
     * структуру страницы из дерева
     *
     * @param $id
     * @return string
     */
    public function actionStuctpage($id) {
        //очистим сообщения
        \Yii::$app->session->removeAllFlashes();

        //поиск линка(урл-страницы)
        $link = LinkSettings::findOne(['id' => $id]);

        //настройка страницы
        $settings = $this->renderPartial('_page_settings', [
            'model' => $link,
        ]);
        //настройка доступа с кранице
        $access = $this->renderPartial('_page_access', [
            'model' => new LinkCredentialsForm($link),
        ]);        
        //языковые настройки страницы
        $languages = $this->renderPartial('_languages_settings', [
            'link' => $link,
            'settings' => LinkLanguages::find()->default->one(),
            'id_lang' => 0,
        ]);        

        return $settings . $languages . $access;
    }

    /**
     * pajax- экшен для сохранения параметров ссылки
     *
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate_link_setting($id)
    {
        $model = LinkSettings::findOne(['id' => $id]);
        ($model->load(Yii::$app->request->post()) && $model->save());
        if(!\Yii::$app->request->isAjax) $this->redirect('index');
        return $this->renderPartial('_page_settings', [
            'model' => $model,
        ]);
    }

    /**
     * pajax- экшен для изменения параметров доступа
     *
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate_credentials($id)
    {
        $link = LinkSettings::findOne(['id' => $id]);
        $model = new LinkCredentialsForm($link);
        ($model->load(Yii::$app->request->post()) && $model->save());
        //если не аякс, то перекидываем на главную
        if(!\Yii::$app->request->isAjax) $this->redirect('index');
        return $this->renderPartial('_page_access', [
            'model' => $model,
        ]);
    }

    /**
     * обновляет языковые настройки страницы
     * если id_lang обновляем язык по умолчанию
     *
     * @param int $id_lang
     */
    public function actionUpdate_language_settings($id, $id_lang=0) {
        //найдем страницу
        $link = \app\modules\acms\models\LinkSettings::find()->where([
            'id' => $id
        ])->one();

        //если нет таких данных то выбиваем ошибку
        if(empty($link)) throw new HttpException(404);

        $linkLang = null;
        //если id_lang нету, то грузим языковую настройку по умолчанию
        if($id_lang == 0) {
            $linkLang = LinkLanguages::find()->where([
                'link_id' => $link->id,
            ])->default->one();
        }
        else {//грузим языковую настройку по id_lang
            $linkLang = LinkLanguages::find()->where([
                'link_id' => $link->id,
                'language_id' => $id_lang,
            ])->one();
        }

        //если нет таких данных то выбиваем ошибку
        if(empty($linkLang)) throw new HttpException(404);

        //пришел пост и удачно сохранился
        ($linkLang->load(Yii::$app->request->post()) && $linkLang->save());
        //если не аякс, то перекидываем на главную
        if(!\Yii::$app->request->isAjax) $this->redirect('index');

        //рендер
        return $this->renderPartial('_languages_settings', [
            'link' => $link,
            'settings' => $linkLang,
            'id_lang' => $id_lang,
        ]);
    }

    /**
     * загружает табуляции языка
     * при клике на раздел
     */
    public function actionLoad_lang_tabs($id) {
        //если не аякс, то перекидываем на главную
        if(!\Yii::$app->request->isAjax) $this->redirect('index');

        //найдем страницу
        $link = \app\modules\acms\models\LinkSettings::find()->where([
            'id' => $id,
        ])->one();

        //если нет таких данных то выбиваем ошибку
        if(empty($link)) throw new HttpException(404);

        //рендер
        return $this->renderPartial('_lang_tabs', [
            'link' => $link,
        ]);
    }

    /**
     * Finds the Links model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Links the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = \app\modules\acms\models\Links::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
    
    /**
     * очистим переменную в шаблоне
     */
    public function actionClear_variable($variable, $link_id, $is_array, $sort) {
        $content = LinkContents::findVariale($variable, $link_id, $is_array, $sort);
        
        if($content) {
            return $content->delete();
        }
        
        return 0;
    }
    
    /**
     * меню добавления/редактирования контентного блока
     * 
     * @param type $variable
     * @param type $link_id
     * @param type $is_array
     * @param type $sort
     */
    public function actionGet_modal_content($variable, $link_id, $is_array, $sort) {
        return 'sdsdf';
    }
}
